[gcode_macro START_PRINT]
gcode:
    #SAVE_VARIABLE VARIABLE=was_interrupted VALUE=True
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Start bed heating
    M140 S{BED_TEMP}
    # Start Extruder heating
    M104 S{EXTRUDER_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    # mesh bed
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    # Home Again
    G28
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Move the nozzle very close to the bed
    G1 Z0.15 F300
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    # Purge Line standard
    PRUSA_LINE_PURGE

[gcode_macro PRUSA_LINE_PURGE]
## Purge line macro that replicates PrusaSlicer's default purge line
gcode:
    G1 Z0.2 F720
    G1 Y-3 F1000 ; go outside print area
    G92 E0
    G1 X60 E9 F1000 ; intro line
    G1 X100 E12.5 F1000 ; intro line
    G92 E0

[gcode_macro END_PRINT]
gcode:
    #SAVE_VARIABLE VARIABLE=was_interrupted VALUE=True
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91

    # Raise nozzle by 10mm
    G1 Z10 F3000

    G90

    # variable_use_custom_pos_end   : True # use custom park coordinates for x,y [True/False]
    # variable_custom_park_x_end    :  11.0   # custom x position; value must be within your defined min and max of X
    # variable_custom_park_y_end    :  200.0   # custom y position; value must be within your defined min and max of Y

    {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}

    {% set use_custom     = client.use_custom_pos_end|default(false)|lower == 'true' %}
    {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch'] else False %}

    {% set custom_park_x  = client.custom_park_x_end|default(0.0) %}
    {% set custom_park_y  = client.custom_park_y_end|default(0.0) %}

    {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
    {% set sp_move        = client.speed_move|default(velocity) * 60 %}

    {% set max       = printer.toolhead.axis_maximum %}
    {% set cone      = printer.toolhead.cone_start_z|default(max.z) %}

    {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
    {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}

    G1 X{x_park} Y{y_park} F{sp_move}
    
    #G1 X-1 Y-1 E-3 F300
    G90
    # Disable steppers
    M84
    #Beep
    M300 S300 P1000


[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x|default(0.0) %}
  {% set custom_park_y  = client.custom_park_y|default(0.0) %}
  {% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
  {% set sp_hop         = client.speed_hop|default(15) * 60 %}
  {% set sp_move        = client.speed_move|default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  _CLIENT_RETRACT
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    #G1 Z10 F600
    #G1 X10 Y10 F600
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}
  M300 S300 P1000

[safe_z_home]
home_xy_position: 11,6
speed: 50.0
z_hop: 15
z_hop_speed: 15.0
move_to_previous: False

#Set weight on bed... not support
[gcode_macro M74]
gcode:

#Change Print Speed... not support
[gcode_macro M201]
gcode:

#config pressure advance
[gcode_macro M900]
gcode:

#M142: Set Cooler Temperature (Fast)
[gcode_macro M142]
gcode:

#M907: Set current to step motor ...
[gcode_macro M907]
gcode:

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state
